var documenterSearchIndex = {"docs":
[{"location":"publisher.html#Publisher-Functions","page":"Publisher Functions","title":"Publisher Functions","text":"","category":"section"},{"location":"publisher.html","page":"Publisher Functions","title":"Publisher Functions","text":"Pages = [\"publisher.md\"]","category":"page"},{"location":"publisher.html","page":"Publisher Functions","title":"Publisher Functions","text":"Modules = [ROS]\nPages = [\"publisher.jl\"]","category":"page"},{"location":"publisher.html#ROS.getNumSubscribers-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Publisher\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Publisher\")},(false, false, false)},N} where N}}","page":"Publisher Functions","title":"ROS.getNumSubscribers","text":"getNumSubscribers(publisher)\n\nReturns the number of subscribers that are currently connected to this Publisher. \n\n\n\n\n\n","category":"method"},{"location":"publisher.html#ROS.getTopic-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Publisher\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Publisher\")},(false, false, false)},N} where N}}","page":"Publisher Functions","title":"ROS.getTopic","text":"getTopic(publisher)\n\nReturns the topic that this Publisher will publish on. \n\n\n\n\n\n","category":"method"},{"location":"publisher.html#ROS.isLatched-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Publisher\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Publisher\")},(false, false, false)},N} where N}}","page":"Publisher Functions","title":"ROS.isLatched","text":"isLatched(publisher)\n\nReturns whether or not this topic is latched.\n\n\n\n\n\n","category":"method"},{"location":"publisher.html#ROS.publish-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Publisher\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Publisher\")},(false, false, false)},N} where N},Cxx.CxxCore.CppValue}","page":"Publisher Functions","title":"ROS.publish","text":"publish(publisher, msg)\n\nPublish a message on the topic associated with this Publisher.\n\n\n\n\n\n","category":"method"},{"location":"publisher.html#ROS.shutdown-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Publisher\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Publisher\")},(false, false, false)},N} where N}}","page":"Publisher Functions","title":"ROS.shutdown","text":"shutdown(publisher)\n\nShutdown the advertisement associated with this Publisher.\n\n\n\n\n\n","category":"method"},{"location":"serviceServer.html#Service-Server-Functions","page":"Service Server Functions","title":"Service Server Functions","text":"","category":"section"},{"location":"serviceServer.html","page":"Service Server Functions","title":"Service Server Functions","text":"Pages = [\"serviceServer.md\"]","category":"page"},{"location":"serviceServer.html","page":"Service Server Functions","title":"Service Server Functions","text":"Modules = [ROS]\nPages = [\"serviceServer.jl\"]","category":"page"},{"location":"serviceServer.html#ROS.getService-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::ServiceServer\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::ServiceServer\")},(false, false, false)},N} where N}}","page":"Service Server Functions","title":"ROS.getService","text":"getService(server)\n\nReturns the service that this ServiceServer will advertise on.\n\n\n\n\n\n","category":"method"},{"location":"serviceServer.html#ROS.shutdown-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::ServiceServer\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::ServiceServer\")},(false, false, false)},N} where N}}","page":"Service Server Functions","title":"ROS.shutdown","text":"shutdown(server)\n\nUnadvertise the service associated with this ServiceServer.\n\n\n\n\n\n","category":"method"},{"location":"serviceClient.html#Service-Client-Functions","page":"Service Client Functions","title":"Service Client Functions","text":"","category":"section"},{"location":"serviceClient.html","page":"Service Client Functions","title":"Service Client Functions","text":"Pages = [\"serviceClient.md\"]","category":"page"},{"location":"serviceClient.html","page":"Service Client Functions","title":"Service Client Functions","text":"Modules = [ROS]\nPages = [\"serviceClient.jl\"]","category":"page"},{"location":"serviceClient.html#ROS.call-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::ServiceClient\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::ServiceClient\")},(false, false, false)},N} where N},Cxx.CxxCore.CppValue}","page":"Service Client Functions","title":"ROS.call","text":"call(serviceClient, srv)\n\nCall the service aliased by this handle with the specified service request/response.\n\n\n\n\n\n","category":"method"},{"location":"serviceClient.html#ROS.exists-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::ServiceClient\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::ServiceClient\")},(false, false, false)},N} where N}}","page":"Service Client Functions","title":"ROS.exists","text":"exists(serviceClient)\n\nChecks if this is both advertised and available.\n\n\n\n\n\n","category":"method"},{"location":"serviceClient.html#ROS.getService-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::ServiceClient\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::ServiceClient\")},(false, false, false)},N} where N}}","page":"Service Client Functions","title":"ROS.getService","text":"getService(serviceClient)\n\nReturns the name of the service this ServiceClient connects to.\n\n\n\n\n\n","category":"method"},{"location":"serviceClient.html#ROS.isPersistent-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::ServiceClient\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::ServiceClient\")},(false, false, false)},N} where N}}","page":"Service Client Functions","title":"ROS.isPersistent","text":"isPersistent(serviceClient)\n\nReturns true if this handle points to a persistent service, false otherwise.\n\n\n\n\n\n","category":"method"},{"location":"serviceClient.html#ROS.isValid-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::ServiceClient\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::ServiceClient\")},(false, false, false)},N} where N}}","page":"Service Client Functions","title":"ROS.isValid","text":"isValid(serviceClient)\n\nReturns whether or not this handle is valid. For a persistent service, this becomes false when the connection has dropped. Non-persistent service handles are always valid.\n\n\n\n\n\n","category":"method"},{"location":"subscriber.html#Subscriber-Functions","page":"Subscriber Functions","title":"Subscriber Functions","text":"","category":"section"},{"location":"subscriber.html","page":"Subscriber Functions","title":"Subscriber Functions","text":"Pages = [\"subscriber.md\"]","category":"page"},{"location":"subscriber.html","page":"Subscriber Functions","title":"Subscriber Functions","text":"Modules = [ROS]\nPages = [\"subscriber.jl\"]","category":"page"},{"location":"subscriber.html#ROS.getNumPublishers-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Subscriber\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Subscriber\")},(false, false, false)},N} where N}}","page":"Subscriber Functions","title":"ROS.getNumPublishers","text":"getNumPublishers(subscriber)\n\nReturns the number of publishers this subscriber is connected to.\n\n\n\n\n\n","category":"method"},{"location":"subscriber.html#ROS.getTopic-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Subscriber\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Subscriber\")},(false, false, false)},N} where N}}","page":"Subscriber Functions","title":"ROS.getTopic","text":"getTopic(subscriber)\n\nReturns the topic that this Subscriber is subscribed on.\n\n\n\n\n\n","category":"method"},{"location":"subscriber.html#ROS.shutdown-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Subscriber\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Subscriber\")},(false, false, false)},N} where N}}","page":"Subscriber Functions","title":"ROS.shutdown","text":"shutdown(subscriber)\n\nUnsubscribe the callback associated with this Subscriber. More...\n\n\n\n\n\n","category":"method"},{"location":"features.html#Features","page":"Features","title":"Features","text":"","category":"section"},{"location":"features.html","page":"Features","title":"Features","text":"Automatic/Dynamic Julia msg and srv type generation\nUsing the @genNew and @updateAll macros users can request from ROS.jl to generate Julia types for all discovered message and service types.\nInclude generated types using the @include macro.\nNodeHandles\nParameters\nPublishers/Subscribers\nService Clients/Servers\nShutdown\nPublishers and Subscribers\nGet topic\nGet number of subscribers/publishers\nShutdown\nService Servers and Clients\nGet service\nCall services\nShutdown\nAction Servers and Clients\nGoals\nFeedback\nResults\nStatus\nWait\nCancel\nROS Package\nrospack commands\nGet package path\nGet all packages\nROS Time\nRate\nDuration\nTime\nGet/Set Now\nSleep\nTF2\n(Static) Transform Broadcasters\nTransform Listeners\nBuffers\nTransformation checks\nLookup transformations\nTransformation calculations","category":"page"},{"location":"actionlib.html#Actionlib-functions","page":"Actionlib functions","title":"Actionlib functions","text":"","category":"section"},{"location":"actionlib.html","page":"Actionlib functions","title":"Actionlib functions","text":"Pages = [\"actionlib.md\"]","category":"page"},{"location":"actionlib.html","page":"Actionlib functions","title":"Actionlib functions","text":"Modules = [ROS, ROS.actionlib]\nPages = [\"actionlib.jl\"]","category":"page"},{"location":"actionlib.html#ROS.actionlib.SimpleActionClient-Tuple{String,Any,Bool}","page":"Actionlib functions","title":"ROS.actionlib.SimpleActionClient","text":"SimpleActionClient(name::String, action_spec, spin::Bool)\n\nSimple constructor.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.SimpleActionClient-Tuple{String,Any}","page":"Actionlib functions","title":"ROS.actionlib.SimpleActionClient","text":"SimpleActionClient(name::String, action_spec)\n\nSimple constructor.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.SimpleActionServer-Tuple{String,Any,Bool}","page":"Actionlib functions","title":"ROS.actionlib.SimpleActionServer","text":"SimpleActionServer(name::String, action_spec, auto_start::Bool)\n\nConstructor for a SimpleActionServer.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.SimpleActionServer-Tuple{String,Any}","page":"Actionlib functions","title":"ROS.actionlib.SimpleActionServer","text":"SimpleActionServer(name::String, action_spec)\n\nConstructor for a SimpleActionServer.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.acceptNewGoal-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.acceptNewGoal","text":"acceptNewGoal(action_server)\n\nAccepts a new goal when one is available. The status of this goal is set to active upon acceptance, and the status of any previously active goal is set to preempted. Preempts received for the new goal between checking if isNewGoalAvailable or invocation of a goal callback and the acceptNewGoal call will not trigger a preempt callback. This means, isPreemptRequested should be called after accepting the goal even for callback-based implementations to make sure the new goal does not have a pending preempt request.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.cancelAllGoals-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.cancelAllGoals","text":"cancelAllGoals(action_client)\n\nCancel all goals currently running on the action server.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.cancelGoal-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.cancelGoal","text":"cancelGoal(action_client)\n\nCancel the goal that we are currently pursuing.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.getResult-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.getResult","text":"getResult(action_client)\n\nGet the Result of the current goal.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.getState-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.getState","text":"getState(action_client)\n\nGet the state information for this goal.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.getText-Tuple{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"actionlib::SimpleClientGoalState\")},(false, false, false)},N} where N}","page":"Actionlib functions","title":"ROS.actionlib.getText","text":"getText(state)\n\nReturns the text field of the state.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.isActive-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.isActive","text":"isActive(action_server)\n\nAllows polling implementations to query about the status of the current goal.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.isDone-Tuple{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"actionlib::SimpleClientGoalState\")},(false, false, false)},N} where N}","page":"Actionlib functions","title":"ROS.actionlib.isDone","text":"isDone(state)\n\nDetermine if goal is done executing (ie. reached a terminal state).\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.isNewGoalAvailable-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.isNewGoalAvailable","text":"isNewGoalAvailable(action_server)\n\nAllows polling implementations to query about the availability of a new goal.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.isPreemptRequested-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.isPreemptRequested","text":"isPreemptRequested(action_server)\n\nAllows polling implementations to query about preempt requests.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.isServerConnected-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.isServerConnected","text":"isServerConnected(action_client)\n\nChecks if the action client is successfully connected to the action server.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.publishFeedback-Tuple{Cxx.CxxCore.CppPtr,Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.publishFeedback","text":"publishFeedback(action_server, feedback)\n\nPublishes feedback for a given goal.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.registerGoalCallback-Tuple{Cxx.CxxCore.CppPtr,Any}","page":"Actionlib functions","title":"ROS.actionlib.registerGoalCallback","text":"registerGoalCallback(action_server, callback)\n\nAllows users to register a callback to be invoked when a new goal is available.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.registerPreemptCallback-Tuple{Cxx.CxxCore.CppPtr,Any}","page":"Actionlib functions","title":"ROS.actionlib.registerPreemptCallback","text":"registerPreemptCallback(action_server, callback)\n\nAllows users to register a callback to be invoked when a new preempt request is available.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.sendGoal-Tuple{Cxx.CxxCore.CppPtr,Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.sendGoal","text":"sendGoal(action_client, goal)\n\nSends a goal to the ActionServer, and also registers callbacks.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.sendGoalAndWait-Tuple{Cxx.CxxCore.CppPtr,Cxx.CxxCore.CppPtr,Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},Any},Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},Any}}","page":"Actionlib functions","title":"ROS.actionlib.sendGoalAndWait","text":"sendGoalAndWait(action_client, goal, ex_timeout, pr_timeout)\n\nSends a goal to the ActionServer, and waits until the goal completes or a timeout is exceeded.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.setAborted-Tuple{Cxx.CxxCore.CppPtr,Cxx.CxxCore.CppPtr,String}","page":"Actionlib functions","title":"ROS.actionlib.setAborted","text":"setAborted(action_server, result, text::String)\n\nSets the status of the active goal to aborted.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.setAborted-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.setAborted","text":"setAborted(action_server)\n\nSets the status of the active goal to aborted.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.setPreempted-Tuple{Cxx.CxxCore.CppPtr,Cxx.CxxCore.CppPtr,String}","page":"Actionlib functions","title":"ROS.actionlib.setPreempted","text":"setPreempted(action_server, result, text::String)\n\nSets the status of the active goal to preempted.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.setPreempted-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.setPreempted","text":"setPreempted(action_server)\n\nSets the status of the active goal to preempted.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.setSucceeded-Tuple{Cxx.CxxCore.CppPtr,Cxx.CxxCore.CppPtr,String}","page":"Actionlib functions","title":"ROS.actionlib.setSucceeded","text":"setSucceeded(action_server, result, text::String)\n\nSets the status of the active goal to succeeded.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.setSucceeded-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.setSucceeded","text":"setSucceeded(action_server)\n\nSets the status of the active goal to succeeded.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.shutdown-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.shutdown","text":"shutdown(action_server)\n\nExplicitly shutdown the action server.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.start-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.start","text":"start(action_server)\n\nExplicitly start the action server, used it auto_start is set to false.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.stopTrackingGoal-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.stopTrackingGoal","text":"stopTrackingGoal(action_client)\n\nStops tracking the state of the current goal. Unregisters this goal's callbacks.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.toString-Tuple{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"actionlib::SimpleClientGoalState\")},(false, false, false)},N} where N}","page":"Actionlib functions","title":"ROS.actionlib.toString","text":"toString(state)\n\nConvert the state to a string. Useful when printing debugging information.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.waitForResult-Tuple{Cxx.CxxCore.CppPtr,Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},N} where N,(false, false, false)}}","page":"Actionlib functions","title":"ROS.actionlib.waitForResult","text":"waitForResult(action_client, timeout)\n\nBlocks until this goal finishes.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.waitForResult-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.waitForResult","text":"waitForResult(action_client)\n\nBlocks until this goal finishes.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.waitForServer-Tuple{Cxx.CxxCore.CppPtr,Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},N} where N,(false, false, false)}}","page":"Actionlib functions","title":"ROS.actionlib.waitForServer","text":"waitForServer(action_client, timeout)\n\nWaits for the ActionServer to connect to this client.\n\n\n\n\n\n","category":"method"},{"location":"actionlib.html#ROS.actionlib.waitForServer-Tuple{Cxx.CxxCore.CppPtr}","page":"Actionlib functions","title":"ROS.actionlib.waitForServer","text":"waitForServer(action_client)\n\nWaits for the ActionServer to connect to this client.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#NodeHandle-Functions","page":"NodeHandle Functions","title":"NodeHandle Functions","text":"","category":"section"},{"location":"nodehandle.html","page":"NodeHandle Functions","title":"NodeHandle Functions","text":"Pages = [\"nodehandle.md\"]","category":"page"},{"location":"nodehandle.html","page":"NodeHandle Functions","title":"NodeHandle Functions","text":"Modules = [ROS]\nPages = [\"nodehandle.jl\"]","category":"page"},{"location":"nodehandle.html#ROS.NodeHandle-Tuple{}","page":"NodeHandle Functions","title":"ROS.NodeHandle","text":"NodeHandle()\n\nCreate a NodeHandle.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.advertise-Tuple{Any,String,Any,Int64}","page":"NodeHandle Functions","title":"ROS.advertise","text":"advertise(nodehandle, topic_name::String, topic_type, queue_size::Int)\n\nAdvertise a topic.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.advertiseService-Tuple{Any,String,Any,Any,Any}","page":"NodeHandle Functions","title":"ROS.advertiseService","text":"advertiseService(nodehandle, service_name::String, service_request_type, service_response_type, callback)\n\nAdvertise a service.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.deleteParam-Tuple{Any,String}","page":"NodeHandle Functions","title":"ROS.deleteParam","text":"deleteParam(n, key::String)\n\nDelete a parameter from the parameter server.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.hasParam-Tuple{Any,String}","page":"NodeHandle Functions","title":"ROS.hasParam","text":"hasParam(n, key::String)\n\nCheck whether a parameter exists on the parameter server.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.param-Tuple{Any,String,Bool}","page":"NodeHandle Functions","title":"ROS.param","text":"param(n, key::String, default::Bool)\n\nAssign value from parameter server, with default.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.param-Tuple{Any,String,Float64}","page":"NodeHandle Functions","title":"ROS.param","text":"param(n, key::String, default::Float64)\n\nAssign value from parameter server, with default.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.param-Tuple{Any,String,Int32}","page":"NodeHandle Functions","title":"ROS.param","text":"param(n, key::String, default::Int32)\n\nAssign value from parameter server, with default.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.param-Tuple{Any,String,Int64}","page":"NodeHandle Functions","title":"ROS.param","text":"param(n, key::String, default::Int64)\n\nAssign value from parameter server, with default.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.param-Tuple{Any,String,String}","page":"NodeHandle Functions","title":"ROS.param","text":"param(n, key::String, default::String)\n\nAssign value from parameter server, with default.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.serviceClient-Tuple{Any,String,Any}","page":"NodeHandle Functions","title":"ROS.serviceClient","text":"serviceClient(nodehandle, topic_name::String, topic_type)\n\nCreate a client for a service.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.setParam-Tuple{Any,String,Bool}","page":"NodeHandle Functions","title":"ROS.setParam","text":"setParam(n, key::String, value::Bool)\n\nSet a value ont the parameter server.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.setParam-Tuple{Any,String,Float64}","page":"NodeHandle Functions","title":"ROS.setParam","text":"setParam(n, key::String, value::Float64)\n\nSet a value ont the parameter server.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.setParam-Tuple{Any,String,Int32}","page":"NodeHandle Functions","title":"ROS.setParam","text":"setParam(n, key::String, value::Int32)\n\nSet a value ont the parameter server.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.setParam-Tuple{Any,String,Int64}","page":"NodeHandle Functions","title":"ROS.setParam","text":"setParam(n, key::String, value::Int64)\n\nSet a value ont the parameter server.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.setParam-Tuple{Any,String,String}","page":"NodeHandle Functions","title":"ROS.setParam","text":"setParam(n, key::String, value::String)\n\nSet a value ont the parameter server.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.shutdown-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::NodeHandle\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::NodeHandle\")},(false, false, false)},N} where N}}","page":"NodeHandle Functions","title":"ROS.shutdown","text":"shutdown(n)\n\nShutdown every handle created through this NodeHandle.\n\n\n\n\n\n","category":"method"},{"location":"nodehandle.html#ROS.subscribe-Tuple{Any,String,Int64,Any,Any}","page":"NodeHandle Functions","title":"ROS.subscribe","text":"subscribe(nodehandle, topic_name::String, queue_size::Int, topic_type, callback)\n\nSubscribe to a topic.\n\n\n\n\n\n","category":"method"},{"location":"roscpp.html#Base-Functions","page":"Base Functions","title":"Base Functions","text":"","category":"section"},{"location":"roscpp.html","page":"Base Functions","title":"Base Functions","text":"Pages = [\"roscpp.md\"]","category":"page"},{"location":"roscpp.html","page":"Base Functions","title":"Base Functions","text":"Modules = [ROS]\nPages = [\"roscpp.jl\"]","category":"page"},{"location":"roscpp.html#ROS.debug-Tuple{Any}","page":"Base Functions","title":"ROS.debug","text":"debug(n)\n\nPrint n with a ROS debug logging level.\n\n\n\n\n\n","category":"method"},{"location":"roscpp.html#ROS.debug_stream-Tuple{Any}","page":"Base Functions","title":"ROS.debug_stream","text":"debug_stream(n)\n\nPrint n with a ROS debug logging level.\n\n\n\n\n\n","category":"method"},{"location":"roscpp.html#ROS.error-Tuple{Any}","page":"Base Functions","title":"ROS.error","text":"error(n)\n\nPrint n with a ROS error logging level.\n\n\n\n\n\n","category":"method"},{"location":"roscpp.html#ROS.error_stream-Tuple{Any}","page":"Base Functions","title":"ROS.error_stream","text":"error_stream(n)\n\nPrint n with a ROS error logging level.\n\n\n\n\n\n","category":"method"},{"location":"roscpp.html#ROS.fatal-Tuple{Any}","page":"Base Functions","title":"ROS.fatal","text":"fatal(n)\n\nPrint n with a ROS fatal logging level.\n\n\n\n\n\n","category":"method"},{"location":"roscpp.html#ROS.fatal_stream-Tuple{Any}","page":"Base Functions","title":"ROS.fatal_stream","text":"fatal_stream(n)\n\nPrint n with a ROS fatal logging level.\n\n\n\n\n\n","category":"method"},{"location":"roscpp.html#ROS.info-Tuple{Any}","page":"Base Functions","title":"ROS.info","text":"info(n)\n\nPrint n with a ROS info logging level.\n\n\n\n\n\n","category":"method"},{"location":"roscpp.html#ROS.info_stream-Tuple{Any}","page":"Base Functions","title":"ROS.info_stream","text":"info_stream(n)\n\nPrint n with a ROS info logging level.\n\n\n\n\n\n","category":"method"},{"location":"roscpp.html#ROS.init-Tuple{String}","page":"Base Functions","title":"ROS.init","text":"init(node_name::String)\n\nROS initialization function.\n\n\n\n\n\n","category":"method"},{"location":"roscpp.html#ROS.now-Tuple{}","page":"Base Functions","title":"ROS.now","text":"now()\n\nRetrieve the current time. If ROS clock time is in use, this returns the time according to the ROS clock. Otherwise returns the current wall clock time.\n\n\n\n\n\n","category":"method"},{"location":"roscpp.html#ROS.ok-Tuple{}","page":"Base Functions","title":"ROS.ok","text":"ok()\n\nCheck whether it's time to exit.\n\n\n\n\n\n","category":"method"},{"location":"roscpp.html#ROS.spin-Tuple{}","page":"Base Functions","title":"ROS.spin","text":"spin()\n\nEnter simple event loop.\n\n\n\n\n\n","category":"method"},{"location":"roscpp.html#ROS.spinOnce-Tuple{}","page":"Base Functions","title":"ROS.spinOnce","text":"spinOnce()\n\nProcess a single round of callbacks.\n\n\n\n\n\n","category":"method"},{"location":"roscpp.html#ROS.warn-Tuple{Any}","page":"Base Functions","title":"ROS.warn","text":"warn(n)\n\nPrint n with a ROS warn logging level.\n\n\n\n\n\n","category":"method"},{"location":"roscpp.html#ROS.warn_stream-Tuple{Any}","page":"Base Functions","title":"ROS.warn_stream","text":"warn_stream(n)\n\nPrint n with a ROS warn logging level.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#TF-Functions","page":"TF Functions","title":"TF Functions","text":"","category":"section"},{"location":"tf.html","page":"TF Functions","title":"TF Functions","text":"Pages = [\"tf.md\"]","category":"page"},{"location":"tf.html","page":"TF Functions","title":"TF Functions","text":"Modules = [ROS, ROS.tf]\nPages = [\"tf.jl\"]","category":"page"},{"location":"tf.html#ROS.tf.Buffer-Tuple{}","page":"TF Functions","title":"ROS.tf.Buffer","text":"Buffer()\n\nConstructor for a Buffer object.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.StaticTransformBroadcaster-Tuple{}","page":"TF Functions","title":"ROS.tf.StaticTransformBroadcaster","text":"StaticTransformBroadcaster()\n\nConstructor (needs a ros::Node reference).\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.TransformBroadcaster-Tuple{}","page":"TF Functions","title":"ROS.tf.TransformBroadcaster","text":"TransformBroadcaster()\n\nConstructor (needs a ros::Node reference).\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.TransformListener-Tuple{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"tf2_ros::Buffer\")},(false, false, false)},(false, false, false)}}","page":"TF Functions","title":"ROS.tf.TransformListener","text":"TransformListener(buffer)\n\nConstructor for transform listener.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.angle-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}},Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}}}","page":"TF Functions","title":"ROS.tf.angle","text":"angle(q1, q2)\n\nReturn the half angle between q1 and q2 geometry_msgs::Quaternions.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.angleShortestPath-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}},Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}}}","page":"TF Functions","title":"ROS.tf.angleShortestPath","text":"angleShortestPath(q1, q2)\n\nReturn the angle between q1 and q2 geometry_msgs::Quaternions.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.canTransform-Tuple{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"tf2_ros::Buffer\")},(false, false, false)},(false, false, false)},String,Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)},String,Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)},String,Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},N} where N,(false, false, false)}}","page":"TF Functions","title":"ROS.tf.canTransform","text":"canTransform(buffer, target_frame::String, target_time, source_frame::String, source_time, fixed_frame::String, timeout)\n\nTest if a transform is possible.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.canTransform-Tuple{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"tf2_ros::Buffer\")},(false, false, false)},(false, false, false)},String,String,Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)},Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},N} where N,(false, false, false)}}","page":"TF Functions","title":"ROS.tf.canTransform","text":"canTransform(buffer, target_frame::String, source_frame::String, time, timeout)\n\nTest if a transform is possible.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.dot-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}},Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}}}","page":"TF Functions","title":"ROS.tf.dot","text":"dot(q1, q2)\n\nReturn the dot product between q1 and q2 geometry_msgs::Quaternions.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.getAngle-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}}}","page":"TF Functions","title":"ROS.tf.getAngle","text":"getAngle(quaternion)\n\nReturn the angle [0, 2π] of rotation represented by this quaternion.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.getAngleShortestPath-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}}}","page":"TF Functions","title":"ROS.tf.getAngleShortestPath","text":"getAngleShortestPath(quaternion)\n\nReturn the angle [0, π] of rotation represented by this quaternion.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.getAxis-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}}}","page":"TF Functions","title":"ROS.tf.getAxis","text":"getAxis(quaternion)\n\nReturn the axis of the rotation represented by this geometry_msgs::Quaternion. \n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.inverse-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}}}","page":"TF Functions","title":"ROS.tf.inverse","text":"inverse(quaternion)\n\nReturn the inverse of this geometry_msgs::Quaternion.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.length-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}}}","page":"TF Functions","title":"ROS.tf.length","text":"length(quaternion)\n\nReturn the length of the quaternion.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.length2-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}}}","page":"TF Functions","title":"ROS.tf.length2","text":"length2(quaternion)\n\nReturn the length squared of the quaternion.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.lookupTransform-Tuple{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"tf2_ros::Buffer\")},(false, false, false)},(false, false, false)},String,Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)},String,Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)},String,Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},N} where N,(false, false, false)}}","page":"TF Functions","title":"ROS.tf.lookupTransform","text":"lookupTransform(buffer, target_frame::String, target_time, source_frame::String, source_time, fixed_frame::String, timeout)\n\nGet the transform between two frames by frame ID assuming fixed frame.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.lookupTransform-Tuple{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"tf2_ros::Buffer\")},(false, false, false)},(false, false, false)},String,String,Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)},Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},N} where N,(false, false, false)}}","page":"TF Functions","title":"ROS.tf.lookupTransform","text":"lookupTransform(buffer, target_frame::String, source_frame::String, time, timeout)\n\nGet the transform between two frames by frame ID.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.normalize-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}}}","page":"TF Functions","title":"ROS.tf.normalize","text":"normalize(quaternion)\n\nNormalize a geometry_msgs::Quaternion (useful after calculations).\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.sendTransform-Tuple{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"tf2_ros::StaticTransformBroadcaster\")},(false, false, false)},(false, false, false)},Array}","page":"TF Functions","title":"ROS.tf.sendTransform","text":"sendTransform(static_broadcaster, transforms::Union{Array,Vector})\n\nSend a TransformStamped message The stamped data structure includes frameid, and time, and parentid already.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.sendTransform-Tuple{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"tf2_ros::StaticTransformBroadcaster\")},(false, false, false)},(false, false, false)},Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::TransformStamped_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::TransformStamped_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(true, false, false)},(false, false, false)}}}","page":"TF Functions","title":"ROS.tf.sendTransform","text":"sendTransform(static_broadcaster, transform)\n\nSend a TransformStamped message The stamped data structure includes frameid, and time, and parentid already.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.sendTransform-Tuple{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"tf2_ros::TransformBroadcaster\")},(false, false, false)},(false, false, false)},Array}","page":"TF Functions","title":"ROS.tf.sendTransform","text":"function sendTransform(broadcaster, transforms::Union{Array,Vector})\n\nSend a TransformStamped message The stamped data structure includes frameid, and time, and parentid already.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.sendTransform-Tuple{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"tf2_ros::TransformBroadcaster\")},(false, false, false)},(false, false, false)},Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::TransformStamped_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::TransformStamped_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(true, false, false)},(false, false, false)}}}","page":"TF Functions","title":"ROS.tf.sendTransform","text":"sendTransform(broadcaster, transform)\n\nSend a TransformStamped message The stamped data structure includes frameid, and time, and parentid already.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.setEuler-Tuple{Number,Number,Number}","page":"TF Functions","title":"ROS.tf.setEuler","text":"setEuler(yaw::Number, pitch::Number, roll::Number)\n\nEuler angles (yaw/pitch/roll) to geometry_msgs::Quaternion.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.setRPY-Tuple{Number,Number,Number}","page":"TF Functions","title":"ROS.tf.setRPY","text":"setRPY(roll::Number, pitch::Number, yaw::Number)\n\nRoll,Pitch,Yaw to geometry_msgs::Quaternion.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.setRotation-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}},Array,Number}","page":"TF Functions","title":"ROS.tf.setRotation","text":"setRotation(quaternion, axis::Union{Array,Vector}, angle::Number)\n\nSet the rotation using axis angle notation.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.slerp-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}},Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::Quaternion_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}},Number}","page":"TF Functions","title":"ROS.tf.slerp","text":"slerp(q1, q2, t::Number)\n\nReturn the geometrymsgs::Quaternion which is the result of Spherical Linear Interpolation between q1 and q2 geometrymsgs::Quaternions.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.transform-Tuple{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"tf2_ros::Buffer\")},(false, false, false)},(false, false, false)},Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::PoseStamped_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::PoseStamped_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::PoseStamped_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(true, false, false)},(false, false, false)}},String,Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},N} where N}}","page":"TF Functions","title":"ROS.tf.transform","text":"transform(buffer, in, target_frame::String, timeout)\n\nTransform an input into the target frame.\n\n\n\n\n\n","category":"method"},{"location":"tf.html#ROS.tf.transform-Tuple{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"tf2_ros::Buffer\")},(false, false, false)},(false, false, false)},Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::PoseStamped_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::PoseStamped_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"geometry_msgs::PoseStamped_\")},Tuple{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppTemplate{Cxx.CxxCore.CppBaseType{Symbol(\"std::allocator\")},Tuple{Nothing}},(false, false, false)}}},(true, false, false)},(false, false, false)}},String,Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N},String,Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},N} where N}}","page":"TF Functions","title":"ROS.tf.transform","text":"transform(buffer, in, target_frame::String, target_time, fixed_frame::String, timeout)\n\nTransform an input into the target frame.\n\n\n\n\n\n","category":"method"},{"location":"time.html#Time-Functions","page":"Time Functions","title":"Time Functions","text":"","category":"section"},{"location":"time.html","page":"Time Functions","title":"Time Functions","text":"Pages = [\"time.md\"]","category":"page"},{"location":"time.html","page":"Time Functions","title":"Time Functions","text":"Modules = [ROS]\nPages = [\"time.jl\"]","category":"page"},{"location":"time.html#ROS.Duration-Tuple{Int64,Int64}","page":"Time Functions","title":"ROS.Duration","text":"Duration(sec::Int, nsec::Int)\n\nConstructor, creates a Duration.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.Duration-Tuple{Number}","page":"Time Functions","title":"ROS.Duration","text":"Duration(t::Number)\n\nConstructor, creates a Duration.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.Duration-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Rate\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Rate\")},(false, false, false)},(false, false, false)}}}","page":"Time Functions","title":"ROS.Duration","text":"Duration(rate)\n\nConstructor, creates a Duration from a Rate.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.Duration-Tuple{}","page":"Time Functions","title":"ROS.Duration","text":"Duration()\n\nDefault constructor, creates a Duration.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.Rate-Tuple{Number}","page":"Time Functions","title":"ROS.Rate","text":"Rate(frequency::Number)\n\nConstructor, creates a Rate.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.Rate-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},(false, false, false)}}}","page":"Time Functions","title":"ROS.Rate","text":"Rate(duration)\n\nConstructor, creates a Rate from a Duration.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.Time-Tuple{Int64,Int64}","page":"Time Functions","title":"ROS.Time","text":"Time(sec::Int, ncsec::Int)\n\nConstructor, creates Time.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.Time-Tuple{Number}","page":"Time Functions","title":"ROS.Time","text":"Time(t::Number)\n\nConstructor, creates Time.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.Time-Tuple{}","page":"Time Functions","title":"ROS.Time","text":"Time()\n\nDefault constructor, creates Time.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.cycleTime-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Rate\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Rate\")},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Rate\")},(false, false, false)},N} where N}}","page":"Time Functions","title":"ROS.cycleTime","text":"cycleTime(rate)\n\nGet the actual run time of a cycle from start to sleep.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.expectedCycleTime-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Rate\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Rate\")},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Rate\")},(false, false, false)},N} where N}}","page":"Time Functions","title":"ROS.expectedCycleTime","text":"expectedCycleTime(rate)\n\nGet the expected cycle time – one over the frequency passed in to the constructor.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.init-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N}}","page":"Time Functions","title":"ROS.init","text":"init(time)\n\nInitialise Time.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.isSimTime-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N}}","page":"Time Functions","title":"ROS.isSimTime","text":"isSimTime(time)\n\nReturns whether or not sim time is used.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.isSystemTime-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N}}","page":"Time Functions","title":"ROS.isSystemTime","text":"isSystemTime(time)\n\nReturns whether or not system time is used.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.isValid-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N}}","page":"Time Functions","title":"ROS.isValid","text":"isValid(time)\n\nReturns whether or not the current time source is valid. Simulation time is valid if it is non-zero.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.now-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N}}","page":"Time Functions","title":"ROS.now","text":"now(time)\n\nRetrieve the current time. If ROS clock time is in use, this returns the time according to the ROS clock. Otherwise returns the current wall clock time.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.reset-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Rate\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Rate\")},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Rate\")},(false, false, false)},N} where N}}","page":"Time Functions","title":"ROS.reset","text":"reset(rate)\n\nSets the start time for the rate to now.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.setNow-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},(false, false, false)}},Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N}","page":"Time Functions","title":"ROS.setNow","text":"setNow(time, now) = @cxx t->setNow(now)\n\nSet now to now time.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.shutdown-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N}}","page":"Time Functions","title":"ROS.shutdown","text":"shutdown(time)\n\nShuts down the Time.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.sleep-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},N} where N}}","page":"Time Functions","title":"ROS.sleep","text":"sleep(duration)\n\nSleep for the amount of time specified by this Duration. If a signal interrupts the sleep, resleeps for the time remaining.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.sleep-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Rate\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Rate\")},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Rate\")},(false, false, false)},N} where N}}","page":"Time Functions","title":"ROS.sleep","text":"sleep(rate)\n\nSleeps for any leftover time in a cycle. Calculated from the last time sleep, reset, or the constructor was called.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.sleepUntil-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},(false, false, false)}},Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N}","page":"Time Functions","title":"ROS.sleepUntil","text":"sleepUntil(time, _end)\n\nSleep until a specific time has been reached. \n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.toSec-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Duration\")},(false, false, false)},N} where N}}","page":"Time Functions","title":"ROS.toSec","text":"toSec(duration)\n\nTurn Duration into floating point seconds.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.toSec-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N}}","page":"Time Functions","title":"ROS.toSec","text":"toSec(time)\n\nTurn Time into floating point seconds.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.useSystemTime-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N}}","page":"Time Functions","title":"ROS.useSystemTime","text":"useSystemTime(time)\n\nSwitch to system time.\n\n\n\n\n\n","category":"method"},{"location":"time.html#ROS.waitForValid-Tuple{Union{Cxx.CxxCore.CppPtr{Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N,(false, false, false)}, Cxx.CxxCore.CppPtr{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},(false, false, false)}, Cxx.CxxCore.CppValue{Cxx.CxxCore.CxxQualType{Cxx.CxxCore.CppBaseType{Symbol(\"ros::Time\")},(false, false, false)},N} where N}}","page":"Time Functions","title":"ROS.waitForValid","text":"waitForValid(time)\n\nWait for time source to become valid. \n\n\n\n\n\n","category":"method"},{"location":"typegen.html#Misc","page":"Misc","title":"Misc","text":"","category":"section"},{"location":"typegen.html","page":"Misc","title":"Misc","text":"Pages = [\"typegen.md\"]","category":"page"},{"location":"typegen.html","page":"Misc","title":"Misc","text":"Modules = [ROS]\nPages = [\"typegen.jl\"]","category":"page"},{"location":"typegen.html#ROS.@genNew-Tuple{}","page":"Misc","title":"ROS.@genNew","text":"genNew()\n\nInitiate the generation of Julia code for all newly found msg and srv ROS packages.\n\n\n\n\n\n","category":"macro"},{"location":"typegen.html#ROS.@include-Tuple{Any}","page":"Misc","title":"ROS.@include","text":"include(expr)\n\nInlude msg and srv files from generated ROS packages.\n\n\n\n\n\n","category":"macro"},{"location":"typegen.html#ROS.@updateAll-Tuple{}","page":"Misc","title":"ROS.@updateAll","text":"updateAll()\n\nInitiate the generation of Julia code for all msg and srv ROS packages (new and already existing ones).\n\n\n\n\n\n","category":"macro"},{"location":"examples.html#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"All the following examples assume that the @genNew or the @updateAll macro was called.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using ROS\nROS.@genNew","category":"page"},{"location":"examples.html#Minimum-Publisher-and-Subscriber-combination-example","page":"Examples","title":"Minimum Publisher & Subscriber combination example","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using ROS\nROS.@include std_msgs: Float64MultiArray\n\npub = nothing\n\nfunction init()\n    ROS.init(\"julia_pub_sub\")\n    nh = ROS.NodeHandle()\n\n    global pub = ROS.advertise(nh, \"test_pub\", ROS.std_msgs_Float64MultiArray, 1)\n    sub = ROS.subscribe(nh, \"test_sub\", 1, ROS.std_msgs_Float64MultiArray, callback)\n\n    while ROS.ok()\n        ROS.spinOnce()\n    end\nend\n\nfunction callback(t)\n    t.data = [1,2,3,4]\n    ROS.publish(pub,t)\nend\n\ninit()","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Note how both the advertise and subscribe functions include the type of the message as the third parameter.","category":"page"},{"location":"examples.html#Minimum-Service-Client-and-Server-combination-example","page":"Examples","title":"Minimum Service Client & Server combination example","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using ROS\nROS.@include std_srvs: SetBool\nROS.@include roscpp_tutorials: TwoInts \n\nsrvc = nothing\n\nfunction init()\n    ROS.init(\"test_services\")\n    nh = ROS.NodeHandle()\n\n    global srvc = ROS.serviceClient(nh, \"add_two_ints\", ROS.roscpp_tutorials_TwoInts);\n    srv = ROS.advertiseService(nh, \"test_srv\", ROS.std_srvs_SetBool_Request, ROS.std_srvs_SetBool_Response, srv_callback)\n    while ROS.ok()\n        ROS.spinOnce()\n    end\nend\n\nfunction srv_callback(req,res)\n    res.success = true\n    res.message = \":D\"\n    st = ROS.roscpp_tutorials_TwoInts()\n    st.request.a = 1\n    st.request.b = 3\n    ROS.call(srvc, st)\n    return true\nend\n\ninit()","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Note how both the serviceClient and advertiseService functions include the type of the service as the third parameter (and the fourth parameter in the case of advertiseService.","category":"page"},{"location":"examples.html#Minimum-Action-Client-and-Server-combination-example","page":"Examples","title":"Minimum Action Client & Server combination example","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using ROS\nROS.@include actionlib_tutorials: FibonacciAction, FibonacciFeedback, FibonacciResult, FibonacciGoal\n\naction_server = nothing\n\nfunction init()\n    ROS.init(\"test_actions\")\n    nh = ROS.NodeHandle()\n\n    global action_server = ROS.actionlib.SimpleActionServer(\"test_action_server\", ROS.actionlib_tutorials_FibonacciAction)\n    ROS.actionlib.start(action_server)\n    ROS.actionlib.registerGoalCallback(action_server, execute_cb)\n\n    action_client = ROS.actionlib.SimpleActionClient(\"test_action_server\", ROS.actionlib_tutorials_FibonacciAction)\n    ROS.actionlib.sendGoal(action_client, ROS.actionlib_tutorials_FibonacciGoal())\n    ROS.actionlib.waitForResult(action_client, ROS.Duration(3))\n\n    action_result_called = ROS.actionlib.getResult(action_client)\n\n    while ROS.ok()\n        state = ROS.actionlib.getState(action_client)\n        println(state)\n        ROS.spinOnce()\n    end\n\nfunction execute_cb()\n    goal = ROS.actionlib.acceptNewGoal(action_server)\n    action_feedback = ROS.actionlib_tutorials_FibonacciFeedback()\n    f::Vector{Number} = []\n    for i in 1:100\n        push!(f,i)\n        action_feedback.sequence = f\n        ROS.actionlib.publishFeedback(action_server, action_feedback)\n    end\n    action_result = ROS.actionlib_tutorials_FibonacciResult()\n    action_result.sequence = f\n    ROS.actionlib.setSucceeded(action_server, action_result, \":)\")\nend\n\ninit()","category":"page"},{"location":"examples.html#TF-example","page":"Examples","title":"TF example","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using ROS\nROS.@include geometry_msgs: TransformStamped, PoseStamped\n\nfunction init()\n    ROS.init(\"testTF\")\n    nh = ROS.NodeHandle()\n\n    b = ROS.tf.TransformBroadcaster()\n    sb = ROS.tf.StaticTransformBroadcaster()\n    bf = ROS.tf.Buffer()\n    tl = ROS.tf.TransformListener(bf)\n    ts = ROS.geometry_msgs_TransformStamped()\n    ts.header.stamp = ROS.now()\n    ts.header.frame_id = \"base_link\"\n    ts.child_frame_id = \"gps_link\"\n    ts.transform.translation.x = 2.3\n    ts.transform.translation.y = 1.6\n    ts.transform.rotation.w = 1\n    ts2 = ROS.geometry_msgs_TransformStamped()\n    ts2.header.stamp = ROS.now()\n    ts2.header.frame_id = \"base_link\"\n    ts2.child_frame_id = \"camera_link\"\n    ts2.transform.translation.x = 0.3\n    ts2.transform.translation.y = 1\n    ts2.transform.rotation.w = 1\n\n    ROS.tf.sendTransform(b, ts)\n\n    # Send multiple TFs at once\n    tss = [ts,ts2]\n    ROS.tf.sendTransform(sb, tss)\n\n    if ROS.tf.canTransform(bf, \"base_link\", \"camera_link\", ROS.Time(0), ROS.Duration(1))\n        stamped = ROS.tf.lookupTransform(bf, \"base_link\", \"camera_link\", ROS.Time(0), ROS.Duration(1))\n        println(stamped.transform.translation.x)\n        println(stamped.header.frame_id)\n\n        p = ROS.geometry_msgs_PoseStamped()\n        p.header.frame_id = \"camera_link\"\n        p.pose.position.x = 1\n        p.pose.position.y = 0.6\n        p.pose.orientation.w = 1\n        try\n            transformed = ROS.tf.transform(bf, p, \"base_link\", ROS.Time(0), \"gps_link\", ROS.Duration(1))\n            println(transformed.pose.position.x)\n        catch\n            println(\"TF Exception :(\")\n        end\n    end\nend\n\ninit()","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Note the multiple included types using the @include macro.","category":"page"},{"location":"package.html#Package-Functions-(ros::package)","page":"Package Functions (ros::package)","title":"Package Functions (ros::package)","text":"","category":"section"},{"location":"package.html","page":"Package Functions (ros::package)","title":"Package Functions (ros::package)","text":"Pages = [\"package.md\"]","category":"page"},{"location":"package.html","page":"Package Functions (ros::package)","title":"Package Functions (ros::package)","text":"Modules = [ROS, ROS.package]\nPages = [\"package.jl\"]","category":"page"},{"location":"package.html#ROS.package.command-Tuple{String}","page":"Package Functions (ros::package)","title":"ROS.package.command","text":"command(s::String)\n\nRuns a rospack command of the form 'rospack s', returning the output as a single string.\n\n\n\n\n\n","category":"method"},{"location":"package.html#ROS.package.getAll-Tuple{}","page":"Package Functions (ros::package)","title":"ROS.package.getAll","text":"getAll()\n\nGets a vector of all packages.\n\n\n\n\n\n","category":"method"},{"location":"package.html#ROS.package.getPath-Tuple{String}","page":"Package Functions (ros::package)","title":"ROS.package.getPath","text":"getPath(s::String)\n\nReturns the fully-qualified path to a package, or an empty string if the package is not found.\n\n\n\n\n\n","category":"method"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: ROS.jl)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = ROS","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"ROS.jl is a Julia wrapper of the ROS C++ client.","category":"page"},{"location":"index.html#Requirements","page":"Home","title":"Requirements","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Julia 1.3 (due to current Cxx limitations)","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"pkg> add ROS","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"or","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"ROS\")","category":"page"},{"location":"index.html#Importing-the-ROS-client-wrapper","page":"Home","title":"Importing the ROS client wrapper","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"using ROS","category":"page"},{"location":"index.html#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Automatic/Dynamic Julia msg and srv type generation\nNodeHandles\nPublishers and Subscribers\nService Servers and Clients\nAction Servers and Clients\nROS Package\nROS Time\nTF2","category":"page"},{"location":"index.html#Naming-conventions","page":"Home","title":"Naming conventions","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"All message and service names replace the C++ namespace symbol :: with an underscore _. Thus for example, geometry_msgs::PoseStamped would be translated in Julia to geometry_msgs_PoseStamped.\nAll generated ROS types have the same name as their contructor without the parentheses (). Thus for example, in Julia geometry_msgs_PoseStamped() will create a PoseStamped object but geometry_msgs_PoseStamped holds the C++ type of the PoseStamped object. This is useful for templated C++ ROS functions (callbacks etc).","category":"page"},{"location":"index.html#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"index.html#API","page":"Home","title":"API","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Pages = [\n    \"roscpp.md\", \n    \"nodehandle.md\",\n    \"subscriber.md\",\n    \"publisher.md\",\n    \"serviceServer.md\",\n    \"serviceClient.md\",\n    \"time.md\",\n    \"package.md\",\n    \"actionlib.md\",\n    \"tf.md\",\n    \"typegen.md\"\n]","category":"page"}]
}
